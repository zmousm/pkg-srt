Description: Downgrade CMake version
 Downgrade required CMake version to fit wheezy-backports.
 And don't use features not available in previous versions:
  * use older signature for target_link_libraries()
  * replace target_compile_options() with somewhat equivalent
    set_target_properties(... PROPERTIES COMPILE_FLAGS)
Author: Zenon Mousmoulas <zmousm@noc.grnet.gr>

Index: srt/CMakeLists.txt
===================================================================
--- srt.orig/CMakeLists.txt
+++ srt/CMakeLists.txt
@@ -7,7 +7,7 @@
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 #
 
-cmake_minimum_required (VERSION 2.8.12 FATAL_ERROR)
+cmake_minimum_required (VERSION 2.8.11 FATAL_ERROR)
 # XXX This can be potentially done in future, but there still exist
 # some dependent project using cmake 2.8 - this can't be done this way.
 #cmake_minimum_required (VERSION 3.0.2 FATAL_ERROR)
@@ -478,11 +478,11 @@ if (srt_libspec_shared)
 	set_property(TARGET ${TARGET_srt}_shared PROPERTY OUTPUT_NAME ${TARGET_srt})
 	set_target_properties (${TARGET_srt}_shared PROPERTIES VERSION ${SRT_VERSION} SOVERSION ${SRT_VERSION_MAJOR})
 	list (APPEND INSTALL_TARGETS ${TARGET_srt}_shared)
-	target_link_libraries(${TARGET_srt}_shared PRIVATE ${SSL_LIBRARIES})
+	target_link_libraries(${TARGET_srt}_shared LINK_PRIVATE ${SSL_LIBRARIES})
 	if (MICROSOFT)
-		target_link_libraries(${TARGET_srt}_shared PRIVATE ws2_32.lib)
+		target_link_libraries(${TARGET_srt}_shared LINK_PRIVATE ws2_32.lib)
 	elseif (MINGW)
-		target_link_libraries(${TARGET_srt}_shared PRIVATE wsock32.lib ws2_32.lib)
+		target_link_libraries(${TARGET_srt}_shared LINK_PRIVATE wsock32.lib ws2_32.lib)
 	elseif (APPLE)
 		set_property(TARGET ${TARGET_srt}_shared PROPERTY MACOSX_RPATH ON)
 	endif()
@@ -506,11 +506,11 @@ if (srt_libspec_static)
 	endif()
 
 	list (APPEND INSTALL_TARGETS ${TARGET_srt}_static)
-	target_link_libraries(${TARGET_srt}_static PRIVATE ${SSL_LIBRARIES})
+	target_link_libraries(${TARGET_srt}_static LINK_PRIVATE ${SSL_LIBRARIES})
 	if (MICROSOFT)
-		target_link_libraries(${TARGET_srt}_static PRIVATE ws2_32.lib)
+		target_link_libraries(${TARGET_srt}_static LINK_PRIVATE ws2_32.lib)
 	elseif (MINGW)
-		target_link_libraries(${TARGET_srt}_static PRIVATE wsock32 ws2_32)
+		target_link_libraries(${TARGET_srt}_static LINK_PRIVATE wsock32 ws2_32)
 	endif()
 endif()
 
@@ -526,7 +526,9 @@ endif()
 # ---
 
 
-target_include_directories(haicrypt_virtual PRIVATE  ${SSL_INCLUDE_DIRS})
+if (SSL_INCLUDE_DIRS)
+	target_include_directories(haicrypt_virtual PRIVATE  ${SSL_INCLUDE_DIRS})
+endif()
 
 if (MICROSOFT)
 	set (SRT_LIBS_PRIVATE ${SRT_LIBS_PRIVATE} ws2_32.lib)
@@ -551,7 +553,7 @@ endif()
 
 foreach(tar ${srtpack_libspec_common})
 	message(STATUS "ADDING TRANSITIVE LINK DEP to:${tar} : ${PTHREAD_LIBRARY} ${dep}")
-	target_link_libraries (${tar} PUBLIC ${PTHREAD_LIBRARY} ${dep})
+	target_link_libraries (${tar} LINK_PUBLIC ${PTHREAD_LIBRARY} ${dep})
 endforeach()
 
 
@@ -566,7 +568,7 @@ endif()
 
 if (srt_libspec_shared)
 if (MICROSOFT)
-	target_link_libraries(${TARGET_srt}_shared PUBLIC Ws2_32.lib)
+	target_link_libraries(${TARGET_srt}_shared LINK_PUBLIC Ws2_32.lib)
 endif()
 endif()
 
@@ -660,7 +662,6 @@ macro(srt_add_program name)
 endmacro()
 
 macro(srt_make_application name)
-	target_compile_options(${name} PRIVATE ${CFLAGS_CXX_STANDARD})
 
 	# This is recommended by cmake, but it doesn't work anyway.
 	# What is needed is that this below CMAKE_INSTALL_RPATH (yes, relative)
@@ -705,7 +706,7 @@ if ( ENABLE_CXX11 )
 	# library should be changed into a static one and made useful
 	# for users.
 	add_library(srtsupport_virtual OBJECT ${SOURCES_support})
-	target_compile_options(srtsupport_virtual PUBLIC ${CFLAGS_CXX_STANDARD})
+	set_target_properties(srtsupport_virtual PROPERTIES COMPILE_FLAGS "${CFLAGS_CXX_STANDARD}")
 	set (VIRTUAL_srtsupport $<TARGET_OBJECTS:srtsupport_virtual>)
 
 	# Applications
@@ -761,8 +762,7 @@ if ( ENABLE_CXX11 )
 			# This program is symlinked under git-cygwin.
 			# Avoid misleading syntax error.
 			srt_add_testprogram(uriparser-test)
-			target_compile_options(uriparser-test PRIVATE -DTEST)
-			target_compile_options(uriparser-test PRIVATE ${CFLAGS_CXX_STANDARD})
+			set_target_properties(uriparser-test PROPERTIES COMPILE_FLAGS "-DTEST" "${CFLAGS_CXX_STANDARD}")
 		endif()
 		
 		srt_add_testprogram(srt-test-live)
